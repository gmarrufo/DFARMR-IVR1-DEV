//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using Microsoft.Web.Services3.Security.Tokens;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="ProducerWeightsAndTestsSoapBinding", Namespace="http://service.test.milk.ats.com")]
public partial class ProducerWeightsAndTestsService : Microsoft.Web.Services3.WebServicesClientProtocol {
    
    private System.Threading.SendOrPostCallback retrieveProducerWeightsAndTestsOperationCompleted;
    
    /// <remarks/>
    public ProducerWeightsAndTestsService() {
        string strWebserviceUrl = ConfigurationManager.AppSettings["WebServiceURL"].ToString();
        this.Url = strWebserviceUrl + "ProducerWeightsAndTests";
#pragma warning disable CS0618 // 'SoapContext.Security' is obsolete: 'SoapContext.Security is obsolete. Consider deriving from SendSecurityFilter or ReceiveSecurityFilter and creating a custom policy assertion that generates these filters.'
        RequestSoapContext.Security.Tokens.Add(new UsernameToken("ivrwebsvc", "V&XT4X@L", PasswordOption.SendPlainText));
#pragma warning restore CS0618 // 'SoapContext.Security' is obsolete: 'SoapContext.Security is obsolete. Consider deriving from SendSecurityFilter or ReceiveSecurityFilter and creating a custom policy assertion that generates these filters.'
    }
    
    /// <remarks/>
    public event retrieveProducerWeightsAndTestsCompletedEventHandler retrieveProducerWeightsAndTestsCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.test.milk.ats.com", ResponseNamespace="http://service.test.milk.ats.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("retrieveProducerWeightsAndTestsReturn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
    public string retrieveProducerWeightsAndTests([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string periodType, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string profileType, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string startDate, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string finishDate, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string divisionNumber, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string producerNumber) {
        object[] results = this.Invoke("retrieveProducerWeightsAndTests", new object[] {
                    periodType,
                    profileType,
                    startDate,
                    finishDate,
                    divisionNumber,
                    producerNumber});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginretrieveProducerWeightsAndTests(string periodType, string profileType, string startDate, string finishDate, string divisionNumber, string producerNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("retrieveProducerWeightsAndTests", new object[] {
                    periodType,
                    profileType,
                    startDate,
                    finishDate,
                    divisionNumber,
                    producerNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndretrieveProducerWeightsAndTests(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void retrieveProducerWeightsAndTestsAsync(string periodType, string profileType, string startDate, string finishDate, string divisionNumber, string producerNumber) {
        this.retrieveProducerWeightsAndTestsAsync(periodType, profileType, startDate, finishDate, divisionNumber, producerNumber, null);
    }
    
    /// <remarks/>
    public void retrieveProducerWeightsAndTestsAsync(string periodType, string profileType, string startDate, string finishDate, string divisionNumber, string producerNumber, object userState) {
        if ((this.retrieveProducerWeightsAndTestsOperationCompleted == null)) {
            this.retrieveProducerWeightsAndTestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveProducerWeightsAndTestsOperationCompleted);
        }
        this.InvokeAsync("retrieveProducerWeightsAndTests", new object[] {
                    periodType,
                    profileType,
                    startDate,
                    finishDate,
                    divisionNumber,
                    producerNumber}, this.retrieveProducerWeightsAndTestsOperationCompleted, userState);
    }
    
    private void OnretrieveProducerWeightsAndTestsOperationCompleted(object arg) {
        if ((this.retrieveProducerWeightsAndTestsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.retrieveProducerWeightsAndTestsCompleted(this, new retrieveProducerWeightsAndTestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void retrieveProducerWeightsAndTestsCompletedEventHandler(object sender, retrieveProducerWeightsAndTestsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class retrieveProducerWeightsAndTestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal retrieveProducerWeightsAndTestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
